#!/bin/sh
set -eu
# fail fast if dependencies are not met
which awk > /dev/null || { echo "awk not found" >&2; exit 1; }

# @getoptions
parser_definition() {
  setup REST help:usage -- "Usage: enget [::]varname [--from source] [--export] [--ensure] [--help]"
  msg
  msg -- 'Arguments:'
  msg label:'varname' -- 'reads as standard variable'
  msg label:':varname' --  'reads as array variable'
  msg label:'::varname' -- 'reads associative array variable'
  msg
  msg -- 'Options:'
  param  SOURCE_OPT   -f  --from var:'[system|user|local]' init:='user' pattern:'system | user | local'\
                                          -- "define the source of the variable, defaults user"
  flag   FLAG_EXPORT  -e  --export on:1 init:=0   -- "export a returned variable"
  flag   FLAG_ENSURE  -i  --ensure on:1 init:=0  -- "do not overwrite the variable"
  disp   :usage       -h  --help          -- "display this help"
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
SOURCE_OPT='user'
FLAG_EXPORT='0'
FLAG_ENSURE='0'
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[f]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[eih]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-f'|'--from')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        case $OPTARG in system | user | local) ;;
          *) set "pattern:system | user | local" "$1"; break
        esac
        SOURCE_OPT="$OPTARG"
        shift ;;
      '-e'|'--export')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FLAG_EXPORT="$OPTARG"
        ;;
      '-i'|'--ensure')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        FLAG_ENSURE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: enget [::]varname [--from source] [--export] [--ensure] [--help]

Arguments:
  varname                     reads as standard variable
  :varname                    reads as array variable
  ::varname                   reads associative array variable

Options:
  -f, --from [system|user|local] 
                              define the source of the variable, defaults user
  -e, --export                export a returned variable
  -i, --ensure                do not overwrite the variable
  -h, --help                  display this help
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

parse "$@"
eval "set -- $REST"

# @parse varname
FLAG_ASSOC=0
FLAG_ARRAY=0
case $1 in
  ::*) FLAG_ASSOC=1;;
  :*) FLAG_ARRAY=1;;
esac
VARNAME=${1##:}
# @end

# @run --ensure
if [ "$FLAG_ENSURE" -eq 1 ] && [ "${!VARNAME:+foo}" ]; then
  exit 0
fi
# @end

# @parse --from
ENVFILE=''
case $SOURCE_OPT in
  system) ENVFILE=/etc/enget/.env ;;
  user) 
    if [ "${XDG_CONFIG_HOME:+foo}" ]; then
      ENVFILE="${XDG_CONFIG_HOME}"/enget/.env
    else
      ENVFILE="$HOME"/.env
    fi;;
  local) ENVFILE="$PWD/.env" ;;
esac
# @end

# @gencmd for --export
cmd=''
if [ "$FLAG_EXPORT" -eq 1 ]; then
  cmd+='declare -g '
else
  cmd+='declare '
fi
# @end

# @gencmd by varname type
if [ "$FLAG_ASSOC" -eq 1 ]; then
  cmd+="-A "
elif [ "$FLAG_ARRAY" -eq 1 ]; then
  cmd+="-a "
fi
cmd+="$VARNAME\n"
cmd_length="${#cmd}"
# @end

# @gencmd from source
cmd+=$(cat "$ENVFILE" | awk 'BEGIN{RS=""}{gsub("\\\\\n", " ", $0); print $0}' | awk -v varname="$VARNAME" 'BEGIN{FS="="}$1==varname')
if [ "${#cmd}" -eq "${cmd_length}" ]; then
  exit 1
fi
# @end

echo "$cmd"